// -------------------------------------------------------
// Automatically generated with Kodeo's Reegenerator
// Generator: RgenTemplate (internal)
// Generation date: 2014-02-02 05:35
// Generated by: GATSU-DEV\Tedy.Pranolo
// -------------------------------------------------------
namespace CustomizeSettings
{
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reegenerator", "2.0.5.0")]
    public partial class SettingsAccessRenderer : Kodeo.Reegenerator.Generators.CodeRenderer
    {
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<returns></returns>
        public override Kodeo.Reegenerator.Generators.RenderResults Render()
        {
            this.Output.Write("// -------------------------------------------------------\r\n// Automatically gene" +
                    "rated with Kodeo\'s Reegenerator\r\n// Generator: CustomizeDesigners.Settings.Setti" +
                    "ngsRenderer\r\n// Generation date: ");
            this.Output.Write( System.DateTime.Now.ToString("yyyy-MM-dd hh:mm") );
            this.Output.Write("\r\n// Generated by: ");
            this.Output.Write( System.Security.Principal.WindowsIdentity.GetCurrent().Name );
            this.Output.Write("\r\n// -------------------------------------------------------\r\n\r\nnamespace ");
            this.Output.Write( this._settingsFile.GeneratedClassNamespace );
            this.Output.Write(@" {
	
	
	[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator"", ""9.0.0.0"")]
	internal sealed partial class ");
            this.Output.Write( this._settingsFile.GeneratedClassName );
            this.Output.Write(@" : global::System.Configuration.ApplicationSettingsBase {
        
		private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
");
 RenderSettings(); 
            this.Output.Write("\r\n\t}\r\n}");
            this.Output.WriteLine();
            return new Kodeo.Reegenerator.Generators.RenderResults(this.Output.ToString());
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="setting"></param>
        public virtual void RenderSetting(SettingsFileSetting setting)
        {
            this.Output.Write(" \t\t[global::System.Configuration.");
            this.Output.Write( setting.Scope );
            this.Output.Write("ScopedSettingAttribute()]\r\n\t\t[global::System.Diagnostics.DebuggerNonUserCodeAttri" +
                    "bute()]\r\n\t\t[global::System.Configuration.DefaultSettingValueAttribute(");
            this.Output.Write( GetDefaultSetting(setting) );
            this.Output.Write(")]\r\n\t\tpublic ");
            this.Output.Write( setting.LangType );
            this.Output.Write(" ");
            this.Output.Write( setting.PropertyName );
            this.Output.Write(" {\r\n\t\t\tget {\r\n\t\t\t\treturn ((");
            this.Output.Write( setting.LangType );
            this.Output.Write(")(this[\"");
            this.Output.Write( setting.PropertyName );
            this.Output.Write("\"]));\r\n\t\t\t} ");
 if (setting.Scope != "Application" && !setting.IsReadOnly) {
            this.Output.Write("\r\n\t\t\tset {\r\n\t\t\t\tthis[\"");
            this.Output.Write( setting.PropertyName );
            this.Output.Write("\"] = value;\r\n\t\t\t} ");
 } 
            this.Output.Write("\r\n\t\t}");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="setting"></param>
        public virtual void RenderConnectionString(SettingsFileSetting setting)
        {
            this.Output.Write(@" 		[global::System.Configuration.ApplicationScopedSettingAttribute()]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
		[global::System.Configuration.DefaultSettingValueAttribute(");
            this.Output.Write( GetDefaultSetting(setting) );
            this.Output.Write(")]\r\n\t\tpublic string ");
            this.Output.Write( setting.Name );
            this.Output.Write(" {\r\n\t\t\tget {\r\n\t\t\t\treturn ((string)(this[\"");
            this.Output.Write( setting.Name );
            this.Output.Write("\"]));\r\n\t\t\t}\r\n\t\t}\r\n");
            this.Output.WriteLine();
        }
        
        /// <summary>
        ///Renders the code as defined in the source script file.
        ///</summary>
        ///<param name="setting"></param>
        public virtual void RenderWebServiceUrl(SettingsFileSetting setting)
        {
            this.Output.Write(" \t\t[global::System.Configuration.");
            this.Output.Write( setting.Scope );
            this.Output.Write(@"ScopedSettingAttribute()]
		[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.WebServiceUrl)]
		[global::System.Configuration.DefaultSettingValueAttribute(");
            this.Output.Write( GetDefaultSetting(setting) );
            this.Output.Write(")]\r\n\t\tpublic string ");
            this.Output.Write( setting.Name );
            this.Output.Write(" {\r\n\t\t\tget {\r\n\t\t\t\treturn ((string)(this[\"");
            this.Output.Write( setting.Name );
            this.Output.Write("\"]));\r\n\t\t\t} ");
 if (setting.Scope != "Application") {
            this.Output.Write("\r\n\t\t\tset {\r\n\t\t\t\tthis[\"");
            this.Output.Write( setting.Name );
            this.Output.Write("\"] = value;\r\n\t\t\t} ");
 } 
            this.Output.Write("\r\n\t\t}");
            this.Output.WriteLine();
        }
    }
}
